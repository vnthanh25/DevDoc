77u/Ly8tLSS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0NCi8vIDxhdXRvLWdlbmVyYXRlZD4NCi8vICAgICBUaGlzIGNvZGUgd2FzIGdlbmVyYXRlZCBieSBhIHRvb2wuDQovLyAgICAgUnVudGltZSBWZXJzaW9uOjQuMC4zMDMxOS4xODQwOA0KLy8NCi8vICAgICBDaGFuZ2VzIHRvIHRoaXMgZmlsZSBtYXkgY2F1c2UgaW5jb3JyZWN0IGJlaGF2aW9yIGFuZCB3aWxsIGJlIGxvc3QgaWYNCi8vICAgICB0aGUgY29kZSBpcyByZWdlbmVyYXRlZC4NCi8vIDwvYXV0by1nZW5lcmF0ZWQ+DQovLy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLQ0KDQpuYW1lc3BhY2UgQ29udmVydGVyLlByb3BlcnRpZXMNCnsNCg0KDQogICAgLy8vIDxzdW1tYXJ5Pg0KICAgIC8vLyAgIEEgc3Ryb25nbHktdHlwZWQgcmVzb3VyY2UgY2xhc3MsIGZvciBsb29raW5nIHVwIGxvY2FsaXplZCBzdHJpbmdzLCBldGMuDQogICAgLy8vIDwvc3VtbWFyeT4NCiAgICAvLyBUaGlzIGNsYXNzIHdhcyBhdXRvLWdlbmVyYXRlZCBieSB0aGUgU3Ryb25nbHlUeXBlZFJlc291cmNlQnVpbGRlcg0KICAgIC8vIGNsYXNzIHZpYSBhIHRvb2wgbGlrZSBSZXNHZW4gb3IgVmlzdWFsIFN0dWRpby4NCiAgICAvLyBUbyBhZGQgb3IgcmVtb3ZlIGEgbWVtYmVyLCBlZGl0IHlvdXIgLlJlc1ggZmlsZSB0aGVuIHJlcnVuIFJlc0dlbg0KICAgIC8vIHdpdGggdGhlIC9zdHIgb3B0aW9uLCBvciByZWJ1aWxkIHlvdXIgVlMgcHJvamVjdC4NCiAgICBbZ2xvYmFsOjpTeXN0ZW0uQ29kZURvbS5Db21waWxlci5HZW5lcmF0ZWRDb2RlQXR0cmlidXRlKCJTeXN0ZW0uUmVzb3VyY2VzLlRvb2xzLlN0cm9uZ2x5VHlwZWRSZXNvdXJjZUJ1aWxkZXIiLCAiNC4wLjAuMCIpXQ0KICAgIFtnbG9iYWw6OlN5c3RlbS5EaWFnbm9zdGljcy5EZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlKCldDQogICAgW2dsb2JhbDo6U3lzdGVtLlJ1bnRpbWUuQ29tcGlsZXJTZXJ2aWNlcy5Db21waWxlckdlbmVyYXRlZEF0dHJpYnV0ZSgpXQ0KICAgIGludGVybmFsIGNsYXNzIFJlc291cmNlcw0KICAgIHsNCg0KICAgICAgICBwcml2YXRlIHN0YXRpYyBnbG9iYWw6OlN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VNYW5hZ2VyIHJlc291cmNlTWFuOw0KDQogICAgICAgIHByaXZhdGUgc3RhdGljIGdsb2JhbDo6U3lzdGVtLkdsb2JhbGl6YXRpb24uQ3VsdHVyZUluZm8gcmVzb3VyY2VDdWx0dXJlOw0KDQogICAgICAgIFtnbG9iYWw6OlN5c3RlbS5EaWFnbm9zdGljcy5Db2RlQW5hbHlzaXMuU3VwcHJlc3NNZXNzYWdlQXR0cmlidXRlKCJNaWNyb3NvZnQuUGVyZm9ybWFuY2UiLCAiQ0ExODExOkF2b2lkVW5jYWxsZWRQcml2YXRlQ29kZSIpXQ0KICAgICAgICBpbnRlcm5hbCBSZXNvdXJjZXMoKQ0KICAgICAgICB7DQogICAgICAgIH0NCg0KICAgICAgICAvLy8gPHN1bW1hcnk+DQogICAgICAgIC8vLyAgIFJldHVybnMgdGhlIGNhY2hlZCBSZXNvdXJjZU1hbmFnZXIgaW5zdGFuY2UgdXNlZCBieSB0aGlzIGNsYXNzLg0KICAgICAgICAvLy8gPC9zdW1tYXJ5Pg0KICAgICAgICBbZ2xvYmFsOjpTeXN0ZW0uQ29tcG9uZW50TW9kZWwuRWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlKGdsb2JhbDo6U3lzdGVtLkNvbXBvbmVudE1vZGVsLkVkaXRvckJyb3dzYWJsZVN0YXRlLkFkdmFuY2VkKV0NCiAgICAgICAgaW50ZXJuYWwgc3RhdGljIGdsb2JhbDo6U3lzdGVtLlJlc291cmNlcy5SZXNvdXJjZU1hbmFnZXIgUmVzb3VyY2VNYW5hZ2VyDQogICAgICAgIHsNCiAgICAgICAgICAgIGdldA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIGlmICgocmVzb3VyY2VNYW4gPT0gbnVsbCkpDQogICAgICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgICAgICBnbG9iYWw6OlN5c3RlbS5SZXNvdXJjZXMuUmVzb3VyY2VNYW5hZ2VyIHRlbXAgPSBuZXcgZ2xvYmFsOjpTeXN0ZW0uUmVzb3VyY2VzLlJlc291cmNlTWFuYWdlcigiQ29udmVydGVyLlByb3BlcnRpZXMuUmVzb3VyY2VzIiwgdHlwZW9mKFJlc291cmNlcykuQXNzZW1ibHkpOw0KICAgICAgICAgICAgICAgICAgICByZXNvdXJjZU1hbiA9IHRlbXA7DQogICAgICAgICAgICAgICAgfQ0KICAgICAgICAgICAgICAgIHJldHVybiByZXNvdXJjZU1hbjsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KDQogICAgICAgIC8vLyA8c3VtbWFyeT4NCiAgICAgICAgLy8vICAgT3ZlcnJpZGVzIHRoZSBjdXJyZW50IHRocmVhZCdzIEN1cnJlbnRVSUN1bHR1cmUgcHJvcGVydHkgZm9yIGFsbA0KICAgICAgICAvLy8gICByZXNvdXJjZSBsb29rdXBzIHVzaW5nIHRoaXMgc3Ryb25nbHkgdHlwZWQgcmVzb3VyY2UgY2xhc3MuDQogICAgICAgIC8vLyA8L3N1bW1hcnk+DQogICAgICAgIFtnbG9iYWw6OlN5c3RlbS5Db21wb25lbnRNb2RlbC5FZGl0b3JCcm93c2FibGVBdHRyaWJ1dGUoZ2xvYmFsOjpTeXN0ZW0uQ29tcG9uZW50TW9kZWwuRWRpdG9yQnJvd3NhYmxlU3RhdGUuQWR2YW5jZWQpXQ0KICAgICAgICBpbnRlcm5hbCBzdGF0aWMgZ2xvYmFsOjpTeXN0ZW0uR2xvYmFsaXphdGlvbi5DdWx0dXJlSW5mbyBDdWx0dXJlDQogICAgICAgIHsNCiAgICAgICAgICAgIGdldA0KICAgICAgICAgICAgew0KICAgICAgICAgICAgICAgIHJldHVybiByZXNvdXJjZUN1bHR1cmU7DQogICAgICAgICAgICB9DQogICAgICAgICAgICBzZXQNCiAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICByZXNvdXJjZUN1bHR1cmUgPSB2YWx1ZTsNCiAgICAgICAgICAgIH0NCiAgICAgICAgfQ0KICAgIH0NCn0NCg==
